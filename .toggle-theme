#!/usr/bin/env python3

import os
import time
import dbus
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib


BEGIN = "BEGIN"
FENCE = "="
SEPARATOR = ""
END = "END"
comment_tokens = {
    "/home/aditya/.tmux.conf": "#",
    "/home/aditya/.config/kitty/kitty.conf": "#",
    "/home/aditya/.config/bat/config": "#",
    "/home/aditya/.vimrc": "\"",
    "/home/aditya/.config/sioyek/prefs_user.config": "#"
}

commands_dark_to_light = [
    "gsettings set org.gnome.desktop.interface color-scheme 'prefer-light'",
	"gsettings set org.gnome.desktop.interface cursor-theme 'custom'",
    "pgrep kitty | xargs -I {} kill -SIGUSR1 {}",
    "tmux source-file /home/aditya/.tmux.conf"
]
commands_light_to_dark = [
    "gsettings set org.gnome.desktop.interface cursor-theme 'custom-white'",
    "pgrep kitty | xargs -I {} kill -SIGUSR1 {}",
    "tmux source-file /home/aditya/.tmux.conf"
]
extensions_light = {
    "search-light/background-color": '"(1.0, 1.0, 1.0, 1.0)"',
    "search-light/border-color": '"(0.73333334922790527, 0.73333334922790527, 0.73333334922790527, 1.0)"',
    "rounded-window-corners-reborn/border-color": '"(0.73333334922790527, 0.73333334922790527, 0.73333334922790527, 1.0)"',
    "blur-my-shell/panel/blur": "false"
}
extensions_dark = {
    "search-light/background-color": '"(0.0, 0.0, 0.0, 1.0)"',
    "search-light/border-color": '"(0.18823529779911041, 0.18823529779911041, 0.18823529779911041, 1.0)"',
    "rounded-window-corners-reborn/border-color": '"(0.18039216101169586, 0.18039216101169586, 0.18039216101169586, 1.0)"',
    "blur-my-shell/panel/blur": '"true"',
    "blur-my-shell/panel/color": '"(0.0, 0.0, 0.0, 0.5)"',
    "blur-my-shell/panel/brightness": '0.75'
}


def comment(line, comment_token):
    if line.startswith(comment_token):
        return line
    return f"{comment_token} {line}"


def uncomment(line, comment_token):
    if not line.startswith(comment_token):
        return line
    return line[len(comment_token) :].lstrip()


def modify_config_file(file, comment_token, mode):
    with open(file, "r") as f:
        lines = f.readlines()

    section = None
    for i, line in enumerate(lines):
        if line.replace(comment_token, "").replace(" ", "").replace("\n", "").replace(FENCE, "") == BEGIN:
            section = "light"
            continue
        if line.replace(comment_token, "").replace(" ", "").replace("\n", "").replace(FENCE, "") == END:
            break
        if (
            section == "light"
            and line.replace(comment_token, "").replace(" ", "").replace("\n", "").replace(FENCE, "") == SEPARATOR
        ):
            section = "dark"
            continue

        if mode == "dark" and section == "light":
            lines[i] = comment(lines[i], comment_token)

        if mode == "dark" and section == "dark":
            lines[i] = uncomment(lines[i], comment_token)

        if mode == "light" and section == "light":
            lines[i] = uncomment(lines[i], comment_token)

        if mode == "light" and section == "dark":
            lines[i] = comment(lines[i], comment_token)

    with open(file, "w") as f:
        f.writelines(lines)


def toggle_theme(namespace, key, value):
    if namespace == "org.freedesktop.appearance" and key == "color-scheme":
        match value:
            case 0:
                mode = "light"
            case 1:
                mode = "dark"
            case _:
                return
        for file, comment_token in comment_tokens.items():
            modify_config_file(file, comment_token, mode)
        if mode == "light":
            for extension, value in extensions_light.items():
                os.system(f"dconf write /org/gnome/shell/extensions/{extension} {value}")
            for command in commands_dark_to_light:
                os.system(command)
        else:
            for extension, value in extensions_dark.items():
                os.system(f"dconf write /org/gnome/shell/extensions/{extension} {value}")
            for command in commands_light_to_dark:
                os.system(command)

def main():
    DBusGMainLoop(set_as_default=True)
    bus = dbus.SessionBus()
    settings = bus.get_object("org.freedesktop.portal.Desktop", "/org/freedesktop/portal/desktop")
    settings.connect_to_signal("SettingChanged", toggle_theme, dbus_interface="org.freedesktop.portal.Settings")
    loop = GLib.MainLoop()
    loop.run()


if __name__ == "__main__":
    time.sleep(20)
    main()
