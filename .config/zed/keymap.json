// Docs: https://zed.dev/docs/key-bindings
// Default keymap: `zed: open default keymap` command
//
// Missing actions:
// 1. {assistant_panel,project_panel,git_panel}::TogglePanel
//    Toggle a panel without focusing it. alt-shift-{a,e,0}.
// 2. workspace::CloseActivePane
//    Close the current pane. q.

[
  {
    "bindings": {
      "alt-=": "zed::IncreaseBufferFontSize",
      "alt-+": "zed::IncreaseBufferFontSize",
      "alt--": "zed::DecreaseBufferFontSize",
      "alt-,": "zed::OpenSettings",
      "alt-shift-x": "zed::Extensions",
      "shift shift": "project_symbols::Toggle",
      "alt-shift-p": "command_palette::Toggle",
      "alt-o": "workspace::Open",
      "alt-t": "workspace::NewFile",
      "alt-shift-t": "pane::ReopenClosedItem",
      "alt-w": "pane::CloseActiveItem",
      "alt-[": "pane::ActivatePreviousItem",
      "alt-]": "pane::ActivateNextItem",
      "alt-h": "workspace::ToggleLeftDock",
      "alt-l": "workspace::ToggleRightDock",
      "alt-j": "workspace::ToggleBottomDock",
      "alt-0": "git_panel::ToggleFocus",
      "alt-a": "assistant::ToggleFocus",
      "alt-e": "project_panel::ToggleFocus",
      "alt-shift-0": ["workspace::SendKeystrokes", "alt-0 alt-0"], // workaround; can open, can't toggle
      "alt-shift-a": ["workspace::SendKeystrokes", "alt-a ctrl-h"],
      "alt-shift-e": ["workspace::SendKeystrokes", "alt-e ctrl-l"],
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-`": "workspace::ToggleBottomDock",
      "alt-shift-h": "workspace::SwapPaneLeft",
      "alt-shift-j": "workspace::SwapPaneDown",
      "alt-shift-k": "workspace::SwapPaneUp",
      "alt-shift-l": "workspace::SwapPaneRight",
      "alt-enter": "menu::SecondaryConfirm"
    }
  },
  {
    "context": "mode == single_line", // bug? (Picker || Menu) not true in Agent history search box
    "bindings": {
      "up": "menu::SelectPrevious",
      "down": "menu::SelectNext"
    }
  },
  {
    "context": "Editor && vim_mode != normal",
    "bindings": {
      "alt-a": "editor::SelectAll",
      "alt-c": "editor::Copy",
      "alt-v": "editor::Paste",
      "alt-x": "editor::Cut",
      "alt-z": "editor::Undo",
      "alt-y": "editor::Redo",
      "alt-backspace": "editor::DeleteToPreviousWordStart"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "space r": "project_panel::Rename",
      "f2": "project_panel::Rename",
      "space n": "project_panel::NewFile",
      "alt-n": "project_panel::NewFile",
      "space d": "project_panel::NewDirectory",
      "d": "project_panel::Delete",
      "alt-c": "project_panel::Copy",
      "alt-v": "project_panel::Paste"
    }
  },
  {
      "context": "(ProjectPanel || GitPanel) && not_editing",
      "bindings": {
        "q": "workspace::ToggleLeftDock" // workaround for the absence of "workspace::CloseActivePane"
      }
  },
  {
    "context": "vim_mode == normal || not_editing || EmptyPane", // why is not_editing not true in EmptyPane?
    "bindings": {
      "space space": "file_finder::Toggle",
      "space t": "tab_switcher::ToggleAll",
      "space f": ["task::Spawn", {"task_name": "File Finder", "reveal_target": "center"}], // hopefully live grep lands soon
      "space h": "workspace::NewSearch",
      "space l": "task::Spawn",
      "ctrl-c": "repl::Interrupt"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "alt-backspace": ["terminal::SendKeystroke", "ctrl-w"],
      "alt-t": "workspace::NewTerminal",
      "alt-c": "terminal::Copy",
      "alt-v": "terminal::Paste",
      "alt-h": "pane::SplitLeft",
      "alt-l": "pane::SplitRight",
      "alt-j": "pane::SplitDown",
      "alt-k": "pane::SplitUp",
      "alt-shift-h": "workspace::SwapPaneLeft",
      "alt-shift-l": "workspace::SwapPaneRight",
      "alt-shift-j": "workspace::SwapPaneDown",
      "alt-shift-k": "workspace::SwapPaneUp",
      "alt-p": "terminal::ToggleViMode"
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "alt-;": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction_conflict",
    "bindings": {
      "alt-;": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      "j": ["vim::Down", { "display_lines": true }],
      "k": ["vim::Up", { "display_lines": true }],
      "Y": ["workspace::SendKeystrokes", "y $"],
      "alt-c": "editor::Copy",
      "space s": "outline::Toggle",
      "space r": "editor::Rename",
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPreviousDiagnostic",
      "alt-shift-f": "editor::FormatSelections",
      "alt->": "assistant::QuoteSelection",
      "ctrl-,": ["editor::SelectPrevious", { "replace_newest": false }],
      "ctrl-.": ["editor::SelectNext", { "replace_newest": false }]
    }
  },
  {
    "context": "Markdown",
    "bindings": {
      "alt-c": "markdown::Copy"
    }
  },
  {
    "context": "AgentPanel",
    "bindings": {
      "alt-n": "agent::NewThread",
      "alt-t": "agent::NewThread",
      "alt-shift-m": "assistant::ToggleModelSelector",
      "alt-<": "assistant::InsertIntoEditor",
      "alt-left": "pane::GoBack"
    }
  },
  {
    "context": "(MessageEditor > Editor) || (EditMessageEditor > Editor)",
    "bindings": {
      "enter": "editor::Newline",
      "alt-enter": "agent::Chat",
      "ctrl-enter": "agent::Chat",
      "alt-h": "agent::OpenHistory",
      "alt-r": "agent::RemoveAllContext",
      "alt-n": "agent::NewThread",
      "alt-t": "agent::NewThread"
    }
  },
  {
    "context": "EditMessageEditor > Editor",
    "bindings": {
      "alt-enter": "menu::Confirm",
      "ctrl-enter": "menu::Confirm"
    }
  },
  {
    "context": "AgentPanel > ThreadHistory > Editor",
    "bindings": {
      "delete": "agent::RemoveSelectedThread"
    }
  },
  {
    "context": "(CommitEditor > Editor) || (GitCommit > Editor) || (GitPanel > Editor)",
    "bindings": {
      "enter": "editor::Newline",
      "shift-escape": "git::ExpandCommitEditor",
      "alt-;": "git::GenerateCommitMessage",
      "alt-shift-enter": "git::Amend",
      "alt-enter": "git::Commit"
    }
  },
  {
    "context": "GitPanel && ChangesList",
    "bindings": {
      "alt-shift-y": "git::ToggleStaged",
      // bug: git::StageAndNext does not work in GitPanel:
      "ctrl-alt-shift-f23": "git::ToggleStaged",
      "alt-y": ["workspace::SendKeystrokes", "ctrl-alt-shift-f23 j"]
    }
  },
  {
    "context": "Editor && !agent_diff",
    "bindings": {
      "alt-shift-y": "git::ToggleStaged"
    }
  }
]
