#!/usr/bin/env python3

# FIXME: logs in even on WiFi networks

import os
import dbus
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib
import subprocess
import time


NM_DEVICE_STATE_ACTIVATED = 100
ROLL_NUMBER = "22B0056"
TOKEN = os.getenv("IITB_INTERNET_TOKEN", None)
if TOKEN is None:
    exit(1)


last_notification_time = 0
last_notification_message = ""


def send_notification(title, message, urgency="normal"):
    global last_notification_time, last_notification_message
    current_time = time.time()
    
    if (message == last_notification_message and
        current_time - last_notification_time < 2):
        return
    
    try:
        subprocess.run([
            "notify-send",
            "-a", "Network Status",
            "-u", urgency,
            title, message
        ])
        last_notification_time = current_time
        last_notification_message = message
    except subprocess.CalledProcessError:
        pass


def get_ethernet_device(nm):
    devices = nm.GetDevices()
    for d in devices:
        device_obj = bus.get_object("org.freedesktop.NetworkManager", d)
        device_props = dbus.Interface(device_obj, "org.freedesktop.DBus.Properties")
        if device_props.Get("org.freedesktop.NetworkManager.Device", "DeviceType") == 1:  # 1 = Ethernet
            return device_obj, device_props
    return None, None


def has_ip4_config(device_props):
    try:
        state = device_props.Get("org.freedesktop.NetworkManager.Device", "State")
        if state != NM_DEVICE_STATE_ACTIVATED:
            return False
            
        ip4_config = device_props.Get("org.freedesktop.NetworkManager.Device", "Ip4Config")
        return ip4_config != "/"
    except:
        return False


def is_iitb_network():
    try:
        subprocess.run(
            ["ping", "-c", "1", "-W", "2", "internet.iitb.ac.in"],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        # print("On IITB network")
        return True
    except subprocess.CalledProcessError:
        # print("Not on IITB network")
        return False


def check_internet_connectivity():
    try:
        connectivity = nm.CheckConnectivity()
        # NetworkManager connectivity states:
        # NM_CONNECTIVITY_UNKNOWN = 0
        # NM_CONNECTIVITY_NONE = 1
        # NM_CONNECTIVITY_PORTAL = 2
        # NM_CONNECTIVITY_LIMITED = 3
        # NM_CONNECTIVITY_FULL = 4
        return connectivity == 4  # Full connectivity
    except subprocess.CalledProcessError:
        return False


def nm_properties_changed(interface, changed_properties, invalidated_properties):
    if "Connectivity" in changed_properties:
        connectivity = changed_properties["Connectivity"]
        if connectivity != 4:  # If not full connectivity
            if is_iitb_network():
                perform_iitb_login()


def perform_iitb_login():
    try:
        subprocess.run(
            ["curl", "--location-trusted", "-u", f"{ROLL_NUMBER}:{TOKEN}",
             "https://internet.iitb.ac.in/login.php"],
            check=True,
            stdout=subprocess.DEVNULL
        )
        send_notification("Link established", "Successfully logged in to internet.iitb.ac.in")
        # print("Successfully logged in to IITB network")
        return True
    except subprocess.CalledProcessError:
        # print("Failed to login to IITB network")
        send_notification("IITB network failure", "Could not log in to internet.iitb.ac.in", "critical")
        return False


def handle_connectivity():
    if check_internet_connectivity():
        # print("Internet is available")
        ...
    else:
        # print("No internet connectivity")
        if is_iitb_network():
            # print("Attempting IITB login...")
            perform_iitb_login()
        else:
            # print("Not attempting login as we're not on IITB network")
            ...


def properties_changed(interface, changed_properties, invalidated_properties):
    if "State" in changed_properties or "Ip4Config" in changed_properties:
        check_and_print_status()


def state_changed(new_state, old_state, reason):
    check_and_print_status()


def check_and_print_status():
    if has_ip4_config(ethernet_props):
        # print("IP configuration available")
        handle_connectivity()
    else:
        # print("No IP configuration")
        ...


# Initialize D-Bus main loop
DBusGMainLoop(set_as_default=True)
# Get system bus
bus = dbus.SystemBus()
# Get NetworkManager interface
nm = dbus.Interface(
    bus.get_object("org.freedesktop.NetworkManager", "/org/freedesktop/NetworkManager"),
    "org.freedesktop.NetworkManager"
)
nm_props = dbus.Interface(
    bus.get_object("org.freedesktop.NetworkManager", "/org/freedesktop/NetworkManager"),
    "org.freedesktop.DBus.Properties"
)
nm_props.connect_to_signal("PropertiesChanged", nm_properties_changed)
# Get the ethernet device
ethernet_device, ethernet_props = get_ethernet_device(nm)
if not ethernet_device:
    print("No ethernet device found")
    exit(1)
# Set up signal watching for property changes
ethernet_props.connect_to_signal("PropertiesChanged", properties_changed)
# Set up signal watching for state changes
ethernet_device.connect_to_signal("StateChanged", state_changed)
# Print initial status and check connectivity
check_and_print_status()
# Start GLib main loop
loop = GLib.MainLoop()
loop.run()
