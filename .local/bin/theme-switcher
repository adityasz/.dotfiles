#!/usr/bin/env python3

import os
import yaml
import dbus
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib


BUS_NAME = "org.freedesktop.portal.Desktop"
OBJECT_PATH = "/org/freedesktop/portal/desktop"
SIGNAL_NAME = "SettingChanged"
DBUS_INTERFACE = "org.freedesktop.portal.Settings"
APPEARANCE_NAMESPACE = "org.freedesktop.appearance"
COLOR_SCHEME_KEY = "color-scheme"

HOME = os.getenv("HOME", None)
if HOME is None:
    raise RuntimeError("Environment variable $HOME is not set. Specify it manually.")
CONFIG_DIR = os.getenv("XDG_CONFIG_HOME", os.path.join(HOME, ".config"))
CONFIG_FILE_NAME = "theme-switcher.yaml"
CONFIG_FILE = os.path.join(CONFIG_DIR, CONFIG_FILE_NAME)

with open(CONFIG_FILE, 'r') as file:
    config = yaml.safe_load(file.read())


def comment(line: str, comment_token: str):
    r"""
    Comment a line with the given comment token.

    .. TODO::
        Add support for closing comment token.

        Currently, only config files with a comment token on the beginning of
        the line are supported.

    :param line: The line
    :param comment_token: The comment token

    :return: The commented line
    """
    if line.startswith(comment_token):
        return line
    return f"{comment_token} {line}"


def uncomment(line: str, comment_token: str):
    r"""
    Uncomment a line with the given comment token.

    .. TODO::
        Add support for closing comment token.

        Currently, only config files with a comment token on the beginning of
        the line are supported.

    :param line: The line
    :param comment_token: The comment token

    :return: The uncommented line
    """
    if not line.startswith(comment_token):
        return line
    return line[len(comment_token) :].lstrip()


def modify_config_file(file: str, comment_token: str, theme: str):
    """
    Comment/uncomment lines in a config file depending on the theme

    .. TODO::
        Add support for closing comment token.

        Currently, only config files with a comment token on the beginning of
        the line are supported.

    :param file: Path to the config file
    :param comment_token: The comment token
    :param theme: The theme
    """
    with open(file, "r") as f:
        lines = f.readlines()

    section = None
    for i, line in enumerate(lines):
        if not line:
            continue

        cleaned_line = (line.replace(comment_token, "")
                            .replace(config["delimiters"]["fence"], "")
                            .strip())

        if cleaned_line == config["delimiters"]["begin"]:
            section = "light"
            continue
        if cleaned_line == config["delimiters"]["end"]:
            break
        if section == "light" and cleaned_line == config["delimiters"]["separator"]:
            section = "dark"
            continue

        if theme == "dark" and section == "light":
            lines[i] = comment(lines[i], comment_token)

        if theme == "dark" and section == "dark":
            lines[i] = uncomment(lines[i], comment_token)

        if theme == "light" and section == "light":
            lines[i] = uncomment(lines[i], comment_token)

        if theme == "light" and section == "dark":
            lines[i] = comment(lines[i], comment_token)

    with open(file, "w") as f:
        f.writelines(lines)


def toggle_theme(namespace, key, value):
    if namespace == APPEARANCE_NAMESPACE and key == COLOR_SCHEME_KEY:
        match value:
            case 0:
                mode = "light"
            case 1:
                mode = "dark"
            case _:
                return

        for file, comment_token in config["comment_tokens"].items():
            modify_config_file(os.path.expandvars(file), comment_token, mode)

        if mode == "light":
            for extension, value in config["extensions"]["light"].items():
                os.system(f'dconf write /org/gnome/shell/extensions/{extension} "{value}"')
            for command in config["commands"]["dark_to_light"]:
                os.system(command)
        else:
            for extension, value in config["extensions"]["dark"].items():
                os.system(f'dconf write /org/gnome/shell/extensions/{extension} "{value}"')
            for command in config["commands"]["light_to_dark"]:
                os.system(command)


def main():
    DBusGMainLoop(set_as_default=True)
    bus = dbus.SessionBus()
    settings = bus.get_object(BUS_NAME, OBJECT_PATH)
    settings.connect_to_signal(SIGNAL_NAME, toggle_theme, dbus_interface=DBUS_INTERFACE)
    loop = GLib.MainLoop()
    loop.run()


if __name__ == "__main__":
    main()
